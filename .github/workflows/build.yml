name: Build with Gradle and Automatic Versioning

on:
  pull_request:
  workflow_dispatch:
  push:

concurrency:
  group: ${{ github.head_ref || format('{0}-{1}', github.ref, github.run_number) }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Release

    runs-on: ubuntu-latest
    permissions: 
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 10

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: temurin

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            **/loom-cache
            **/prebundled-jars
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Chmod Gradle
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew build --no-daemon

      # Automatic Release Creation/Update
      - name: Extract version and release type
        id: extract_version
        run: |
          RELEASE_TYPE=$(echo "$GITHUB_EVENT_INPUT_DESCRIPTION" | cut -d " " -f1)
          RELEASE_VERSION=$(echo "$GITHUB_EVENT_INPUT_DESCRIPTION" | cut -d " " -f2)
          echo "Release Type: $RELEASE_TYPE" 
          echo "Release Version: $RELEASE_VERSION" 
          echo "::set-output name=RELEASE_TYPE::$RELEASE_TYPE"
          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"

      - name: Create or Update Release
        id: create_release
        uses: actions/github-script@v6
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          script: |
            const releaseType = "${{ steps.extract_version.outputs.RELEASE_TYPE }}"; 
            const releaseVersion = "${{ steps.extract_version.outputs.RELEASE_VERSION || 'v1.0.1' }}";
            const releaseName = `${releaseType} Update ${releaseVersion}`;
            const releaseBody = `${{ github.event.head_commit.message }}`; 

            let existingRelease = null; 

            try {
              existingRelease = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: releaseVersion, 
              });
            } catch (error) {
              if (error.status !== 404) { 
                console.error("Error fetching release:", error);
                throw error; 
              }
            }

            let releaseData = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: releaseVersion,
              name: releaseName,
              body: releaseBody,
              draft: false,
              prerelease: false,
            };

            if (existingRelease && existingRelease.status === 200) {
              console.log(`Updating existing release for tag ${releaseVersion}`);
              releaseData.release_id = existingRelease.data.id;
              await github.rest.repos.updateRelease(releaseData);
            } else {
              console.log(`Creating new release for tag ${releaseVersion}`);
              await github.rest.repos.createRelease(releaseData);
            }

      - name: Get Release Upload URL
        id: get_upload_url
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: "${{ steps.extract_version.outputs.RELEASE_VERSION }}"
            });
            core.setOutput("upload_url", release.data.upload_url); 

      - name: Upload JAR to Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}  
          asset_path: .versions\1.8.9-forge\build\libs\HeldItemCounterMod-1.8.9-forge_.jar 
          asset_name: HeldItemCounterMod-1.8.9-forge-${{ steps.extract_version.outputs.RELEASE_VERSION }}.jar
          asset_content_type: application/java-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}