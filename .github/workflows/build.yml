name: Build with Gradle and Automatic Versioning

on:
  pull_request:
  workflow_dispatch:
  push:

concurrency:
  group: ${{ github.head_ref || format('{0}-{1}', github.ref, github.run_number) }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Release

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 10

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: temurin

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            **/loom-cache
            **/prebundled-jars
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Chmod Gradle
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew build --no-daemon

      # Automatic Versioning and Release
      - name: Extract version and release type
        id: extract_version
        run: |
          RELEASE_TYPE=$(echo "$GITHUB_EVENT_INPUT_DESCRIPTION" | cut -d " " -f1)
          RELEASE_VERSION=$(echo "$GITHUB_EVENT_INPUT_DESCRIPTION" | cut -d " " -f2)
          echo "Release Type: $RELEASE_TYPE" # Debugging output
          echo "Release Version: $RELEASE_VERSION" # Debugging output
          echo "::set-output name=RELEASE_TYPE::$RELEASE_TYPE"
          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"

      - name: Create or Update Release
        id: create_release
        uses: actions/github-script@v6
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          script: |
            const releaseType = "${{ steps.extract_version.outputs.RELEASE_TYPE }}"; 
            const releaseVersion = "${{ steps.extract_version.outputs.RELEASE_VERSION || 'v1.0.1' }}";
            const releaseName = `${releaseType} Update ${releaseVersion}`;
            const releaseBody = `${{ github.event.head_commit.message }}`; 

            // Try with and without "v" prefix
            const existingRelease = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: releaseVersion, 
            }).catch(async (error) => { 
              if (error.status === 404 && !releaseVersion.startsWith('v')) {
                // Retry with "v" prefix if not found
                return await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: `v${releaseVersion}`,
                });
              }
              throw error; // Re-throw if not a 404 or already has "v"
            });

            if (existingRelease.status === 200) {
              console.log(`Updating existing release for tag ${releaseVersion}`);
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: existingRelease.data.id,
                tag_name: releaseVersion,
                name: releaseName,
                body: releaseBody,
                draft: false,
                prerelease: false,
              });
            } else {
              console.log(`Creating new release for tag ${releaseVersion}`);
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: releaseVersion,
                name: releaseName,
                body: releaseBody,
                draft: false,
                prerelease: false,
              });
            }